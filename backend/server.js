// backend/server.js
const path = require("path");
const fs = require("fs");
const express = require("express");
const cors = require("cors");
require("dotenv").config();
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const jwt = require('jsonwebtoken');
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const AppleStrategy = require('passport-apple').Strategy;
const VKontakteStrategy = require('passport-vkontakte').Strategy;
const YandexStrategy = require('passport-yandex').Strategy;

const axios = require('axios');

const mongoose = require("mongoose");
const http = require("http");
const { Server } = require("socket.io");

// ---------- CONFIG ----------
const MONGO_URI =
  process.env.MONGO_URI ||
  "mongodb+srv://tfotlabs_db_user:<Ferger123456>@nebula.m3rudui.mongodb.net/?retryWrites=true&w=majority&appName=Nebula";

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("‚úÖ MongoDB connected"))
  .catch((err) => console.error("‚ùå MongoDB connection error:", err));

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: ["http://localhost:3000"], methods: ["GET", "POST"] },
});
const PORT = process.env.PORT || 5000;

// ---------- SCHEMAS ----------
const ChatMessageSchema = new mongoose.Schema({
  from: { type: String, default: "user" },
  text: String,
  at: { type: Date, default: Date.now },
  chatId: String,
  ai: Boolean,
  type: { type: String, default: "text" },
  url: String,
});
const ChatMessage = mongoose.model("ChatMessage", ChatMessageSchema);

const ChatSchema = new mongoose.Schema({
  chatId: { type: String, required: true },
  userId: String,
  status: { type: String, enum: ["open", "closed"], default: "open" },
  createdAt: { type: Date, default: Date.now },
  closedAt: Date,
});
const Chat = mongoose.model("Chat", ChatSchema);

const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  user_country: { type: String, default: '' },
  language: { type: String, default: 'en' },
  payment_method: { type: String, default: 'stripe' },
  currency: { type: String, default: 'USD' },
  subscription: {
    type: String, // e.g. 'basic', 'premium', etc.
    default: 'none'
  },
  subscription_status: { type: String, default: 'free' },
  subscriptionEnd: Date,
  createdAt: { type: Date, default: Date.now },
});
const User = mongoose.model("User", UserSchema);

// Auth middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Access token required' });

  jwt.verify(token, process.env.JWT_SECRET || 'fallback_secret', (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
};

const SubscriptionSchema = new mongoose.Schema({
  id: String,
  name: String,
  price: Number,
  description: String,
});
const Subscription = mongoose.model("Subscription", SubscriptionSchema);

const getCountryConfig = (country) => {
  const upper = country.toUpperCase();
  const map = {
    'RU': { currency: 'RUB', payment_method: 'robokassa', language: 'ru' },
    'US': { currency: 'USD', payment_method: 'stripe', language: 'en' },
    'GB': { currency: 'GBP', payment_method: 'stripe', language: 'en' },
    'FR': { currency: 'EUR', payment_method: 'stripe', language: 'fr' },
    'DE': { currency: 'EUR', payment_method: 'stripe', language: 'de' },
    'ES': { currency: 'EUR', payment_method: 'stripe', language: 'es' },
    'CN': { currency: 'CNY', payment_method: 'stripe', language: 'zh' },
    'CA': { currency: 'CAD', payment_method: 'stripe', language: 'en' },
    'MX': { currency: 'MXN', payment_method: 'stripe', language: 'es' },
  };
  const base = map[upper] || { currency: 'USD', payment_method: 'stripe', language: 'en' };
  return { country: upper, ...base };
};

// Seed tariffs if not exist
const tariffs = [
  { id: 'basic', name: 'Basic', price: 990, description: '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø' },
  { id: 'standard', name: 'Standard', price: 2990, description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø' },
  { id: 'premium', name: 'Premium', price: 3990, description: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏' },
  { id: 'pro', name: 'Pro', price: 5990, description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω' },
  { id: 'elite', name: 'Elite', price: 7990, description: '–≠–ª–∏—Ç–Ω—ã–π –ø–ª–∞–Ω' },
  { id: 'ultimate', name: 'Ultimate', price: 16990, description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø' },
];
Subscription.findOne().then((doc) => {
  if (!doc) {
    Subscription.insertMany(tariffs);
  }
});

// Passport strategies
passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
  try {
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err);
  }
});

passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: "/auth/google/callback"
}, async (accessToken, refreshToken, profile, done) => {
  try {
    let user = await User.findOne({ email: profile.emails[0].value });
    if (!user) {
      user = new User({ email: profile.emails[0].value });
      await user.save();
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.use(new AppleStrategy({
  clientID: process.env.APPLE_CLIENT_ID,
  teamID: process.env.APPLE_TEAM_ID,
  clientSecret: process.env.APPLE_CLIENT_SECRET,
  callbackURL: "/auth/apple/callback",
  scope: 'email'
}, async (accessToken, refreshToken, id, profile, done) => {
  try {
    let user = await User.findOne({ email: profile.email });
    if (!user) {
      user = new User({ email: profile.email });
      await user.save();
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.use(new VKontakteStrategy({
  clientID: process.env.VK_CLIENT_ID,
  clientSecret: process.env.VK_CLIENT_SECRET,
  callbackURL: "/auth/vk/callback",
  profileFields: ['email']
}, async (accessToken, refreshToken, params, profile, done) => {
  try {
    let user = await User.findOne({ email: profile.emails ? profile.emails[0].value : params.email });
    if (!user) {
      user = new User({ email: profile.emails ? profile.emails[0].value : params.email });
      await user.save();
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.use(new YandexStrategy({
  clientID: process.env.YANDEX_CLIENT_ID,
  clientSecret: process.env.YANDEX_CLIENT_SECRET,
  callbackURL: "/auth/yandex/callback"
}, async (accessToken, refreshToken, profile, done) => {
  try {
    let user = await User.findOne({ email: profile.emails[0].value });
    if (!user) {
      user = new User({ email: profile.emails[0].value });
      await user.save();
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

// ---------- SOCKET.IO ----------
io.on("connection", (socket) => {
  console.log("üü¢ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:", socket.id);

  // –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
  socket.on("operator:join", () => {
    socket.join("operators");
    console.log("üë®‚Äçüíª –æ–ø–µ—Ä–∞—Ç–æ—Ä:", socket.id);
  });

  // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —á–∞—Ç—É
  socket.on("chat:join", async (chatId) => {
    try {
      socket.join(`chat:${chatId}`);
      const msgs = await ChatMessage.find({ chatId }).sort({ at: 1 }).limit(500);
      socket.emit("chat:history", msgs);

      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ò–ò
      if (msgs.length === 0) {
        const welcomeMsg = await ChatMessage.create({
          from: "ai",
          text: "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Nebula. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–º—ã:\n‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞\n‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–∏\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏\n‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!",
          chatId: chatId,
          ai: true,
        });
        io.to(`chat:${chatId}`).emit("chat:message", welcomeMsg);
        console.log(`[${chatId}] AI: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ chat:join", err);
    }
  });

  // –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  socket.on("chat:message", async (msg) => {
    try {
      if (!msg || !msg.text) return;
 
      let chat = await Chat.findOne({ chatId: msg.chatId });
      if (!chat) {
        chat = await Chat.create({ chatId: msg.chatId });
      }
 
      const wasClosed = chat.status === "closed";
 
      const item = await ChatMessage.create({
        from: msg.from || "user",
        text: msg.text,
        chatId: msg.chatId,
        at: msg.at ? new Date(msg.at) : new Date(),
        ai: !!msg.ai,
        type: msg.type || "text",
        url: msg.url || null,
      });
 
      // –ï—Å–ª–∏ —á–∞—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º AI-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      if (wasClosed) {
        chat.status = "open";
        await chat.save();
 
        const aiWelcomeMsg = await ChatMessage.create({
          from: "ai",
          text: "–ü—Ä–∏–≤–µ—Ç! –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω–æ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞. –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–º—ã:\n‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –†–§, —Å–∫–æ—Ä–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∑–∞–ø—É—Å–∫)\n‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏\n‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ Nebula\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ!",
          chatId: msg.chatId,
          ai: true,
        });
 
        io.to(`chat:${msg.chatId}`).emit("chat:message", aiWelcomeMsg);
      }
 
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞ (—é–∑–µ—Ä + –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É)
      io.to(`chat:${msg.chatId}`).emit("chat:message", item);

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
      if (item.from === "user") {
        const userText = item.text.toLowerCase();
        let aiResponse = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.";
    
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if (userText.includes("–≤–µ—Ä–Ω–∏—Å—å") || userText.includes("–æ—Ç–º–µ–Ω–∞") || userText.includes("cancel") || userText.includes("–æ—Ç–º–µ–Ω–∏—Ç—å") || userText.includes("back") || userText.includes("–∫ –±–æ—Ç—É") || userText.includes("ai only") || userText.includes("–æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")) {
          aiResponse = "–•–æ—Ä–æ—à–æ, —è —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏! –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–º–µ–Ω—ë–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?";
        } else if (userText.includes("–ø—Ä–∏–≤–µ—Ç") || userText.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") || userText.includes("hello") || userText.includes("hi")) {
          aiResponse = "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ Nebula. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?";
        } else if (userText.includes("—Å–∫–∞—á–∞—Ç—å") || userText.includes("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ") || userText.includes("download") || userText.includes("–≥–¥–µ –Ω–∞–π—Ç–∏") || userText.includes("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å") || userText.includes("app") || userText.includes("–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ") || userText.includes("ios") || userText.includes("android") || userText.includes("windows") || userText.includes("macos") || userText.includes("intel") || userText.includes("apple m") || userText.includes("—É—Å—Ç–∞–Ω–æ–≤–∫–∞") || userText.includes("–∏–Ω—Å—Ç–∞–ª–ª") || userText.includes("–∑–∞–≥—Ä—É–∑–∏—Ç—å") || userText.includes("get app") || userText.includes("mobile app") || userText.includes("desktop app") || userText.includes("–ø—Ä–æ–≥—Ä–∞–º–º–∞") || userText.includes("software") || userText.includes("apk") || userText.includes("ipa") || userText.includes("exe") || userText.includes("dmg") || userText.includes("–≥–¥–µ —Å–∫–∞—á–∞—Ç—å") || userText.includes("link to download") || userText.includes("install guide") || userText.includes("how to install") || userText.includes("app store") || userText.includes("play store") || userText.includes("microsoft store") || userText.includes("mac app store") || userText.includes("nebula app") || userText.includes("nebula download") || userText.includes("version") || userText.includes("update app") || userText.includes("latest version") || userText.includes("beta") || userText.includes("release") || userText.includes("setup") || userText.includes("run") || userText.includes("launch") || userText.includes("mobile") || userText.includes("desktop") || userText.includes("pc") || userText.includes("mac") || userText.includes("phone") || userText.includes("tablet")) {
          const linkMsg = {
            from: "ai",
            type: "link",
            text: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –°–∫–∞—á–∞—Ç—å",
            url: "/download",
            chatId: msg.chatId,
            at: new Date().toISOString(),
            ai: true,
          };
          const item = await ChatMessage.create(linkMsg);
          io.to(`chat:${msg.chatId}`).emit("chat:message", item);
          console.log(`[${msg.chatId}] AI: Link to download`);
          return;
        } else if (userText.includes("–ø–æ–¥–ø–∏—Å–∫–∞") || userText.includes("–æ–ø–ª–∞—Ç–∞") || userText.includes("buy") || userText.includes("–ø–æ–∫—É–ø–∫–∞") || userText.includes("—Ü–µ–Ω") || userText.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å")) {
          aiResponse = "–ü–æ–¥–ø–∏—Å–∫–∞ Nebula: 499‚ÇΩ/–º–µ—Å (–†–§, —Å–∫–æ—Ä–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ). –í–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∏–º—ã, AI, –ø—Ä–µ–º–∏—É–º. –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π? –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.";
        } else if (userText.includes("–≤–∞–∫–∞–Ω—Å–∏—è") || userText.includes("—Ä–∞–±–æ—Ç–∞") || userText.includes("job") || userText.includes("—Ä–µ–∑—é–º–µ") || userText.includes("–∫–∞—Ä—å–µ—Ä–∞") || userText.includes("–Ω–∞–π–º") || userText.includes("—Ä–∞–±–æ—Ç–∞ –≤ nebula") || userText.includes("employment") || userText.includes("hire") || userText.includes("career") || userText.includes("positions") || userText.includes("openings") || userText.includes("vacancy") || userText.includes("job opening") || userText.includes("apply") || userText.includes("–æ—Ç–∫–ª–∏–∫") || userText.includes("—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å") || userText.includes("hr") || userText.includes("recruitment") || userText.includes("staff") || userText.includes("team") || userText.includes("join team") || userText.includes("—Ä–∞–±–æ—Ç–∞—Ç—å") || userText.includes("–∑–∞—Ä–ø–ª–∞—Ç–∞") || userText.includes("—É—Å–ª–æ–≤–∏—è") || userText.includes("–∏–Ω—Ç–µ—Ä–≤—å—é") || userText.includes("frontend") || userText.includes("backend") || userText.includes("devops") || userText.includes("designer") || userText.includes("engineer") || userText.includes("developer") || userText.includes("programmer") || userText.includes("software engineer") || userText.includes("ml") || userText.includes("ai") || userText.includes("data scientist") || userText.includes("mobile dev") || userText.includes("react") || userText.includes("node") || userText.includes("python") || userText.includes("fullstack") || userText.includes("internship") || userText.includes("—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞") || userText.includes("junior") || userText.includes("senior") || userText.includes("lead") || userText.includes("manager") || userText.includes("community")) {
          const linkMsg = {
            from: "ai",
            type: "link",
            text: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –í–∞–∫–∞–Ω—Å–∏–∏",
            url: "/jobs",
            chatId: msg.chatId,
            at: new Date().toISOString(),
            ai: true,
          };
          const item = await ChatMessage.create(linkMsg);
          io.to(`chat:${msg.chatId}`).emit("chat:message", item);
          console.log(`[${msg.chatId}] AI: Link to jobs`);
          return;
        } else if (userText.includes("—Å—Ç—Ä–∏–º") || userText.includes("—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è") || userText.includes("stream") || userText.includes("watch") || userText.includes("–º–∞—Ç—á") || userText.includes("—Ñ—É—Ç–±–æ–ª") || userText.includes("–±–∞—Å–∫–µ—Ç–±–æ–ª")) {
          aiResponse = "–°—Ç—Ä–∏–º—ã –≤ Nebula: —Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª, live. –ü—Ä–æ–±–ª–µ–º—ã? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (–º–∏–Ω–∏–º—É–º 5Mbps), –æ–±–Ω–æ–≤–∏—Ç–µ app. –£–∫–∞–∂–∏—Ç–µ –º–∞—Ç—á –∏–ª–∏ –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–º–æ—â–∏.";
        } else if (userText.includes("–ø–æ–º–æ—â—å") || userText.includes("–ø—Ä–æ–±–ª–µ–º–∞") || userText.includes("help") || userText.includes("issue") || userText.includes("–æ—à–∏–±–∫–∞") || userText.includes("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")) {
          aiResponse = "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ: —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∏–º, –ø–æ–¥–ø–∏—Å–∫–∞)? –Ø –ø–æ–º–æ–≥—É –∏–ª–∏ –ø–æ–¥–∫–ª—é—á—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.";
        } else if (userText.includes("–æ –Ω–∞—Å") || userText.includes("–æ –≤–∞—Å") || userText.includes("about") || userText.includes("–∫–æ–º–ø–∞–Ω–∏—è") || userText.includes("nebula —á—Ç–æ") || userText.includes("–æ nebula") || userText.includes("—á—Ç–æ nebula") || userText.includes("who we are") || userText.includes("–∫—Ç–æ –º—ã") || userText.includes("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") || userText.includes("info") || userText.includes("history") || userText.includes("–∏—Å—Ç–æ—Ä–∏—è") || userText.includes("mission") || userText.includes("–º–∏—Å—Å–∏—è") || userText.includes("vision") || userText.includes("team") || userText.includes("–∫–æ–º–∞–Ω–¥–∞") || userText.includes("founders") || userText.includes("–æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏") || userText.includes("product") || userText.includes("–ø—Ä–æ–¥—É–∫—Ç") || userText.includes("services") || userText.includes("—É—Å–ª—É–≥–∏") || userText.includes("features") || userText.includes("—Ñ—É–Ω–∫—Ü–∏–∏") || userText.includes("what is nebula") || userText.includes("—á—Ç–æ —Ç–∞–∫–æ–µ nebula") || userText.includes("nebula app") || userText.includes("–æ –ø—Ä–æ–µ–∫—Ç–µ") || userText.includes("project") || userText.includes("startup") || userText.includes("company info") || userText.includes("profile") || userText.includes("–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç") || userText.includes("official") || userText.includes("overview") || userText.includes("–æ–±–∑–æ—Ä") || userText.includes("description") || userText.includes("–æ–ø–∏—Å–∞–Ω–∏–µ") || userText.includes("background") || userText.includes("—Ñ–æ–Ω") || userText.includes("story") || userText.includes("–∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–∞–Ω–∏–∏") || userText.includes("corporate") || userText.includes("–±–∏–∑–Ω–µ—Å") || userText.includes("enterprise") || userText.includes("brand") || userText.includes("–æ –∫–æ–º–ø–∞–Ω–∏–∏") || userText.includes("–∫–æ–º–ø–∞–Ω–∏—è nebula") || userText.includes("nebula company") || userText.includes("—á—Ç–æ –∑–∞ nebula") || userText.includes("–∑–∞—á–µ–º nebula") || userText.includes("–¥–ª—è —á–µ–≥–æ nebula") || userText.includes("–∏–Ω—Ñ–æ nebula") || userText.includes("nebula info") || userText.includes("–æ –Ω–µ–±—É–ª–∞") || userText.includes("–Ω–µ–±—É–ª–∞") || userText.includes("about us") || userText.includes("us") || userText.includes("–º—ã") || userText.includes("developers") || userText.includes("—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏") || userText.includes("creator") || userText.includes("—Å–æ–∑–¥–∞—Ç–µ–ª—å") || userText.includes("origin") || userText.includes("–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")) {
          const linkMsg = {
            from: "ai",
            type: "link",
            text: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –û –Ω–∞—Å",
            url: "/about",
            chatId: msg.chatId,
            at: new Date().toISOString(),
            ai: true,
          };
          const item = await ChatMessage.create(linkMsg);
          io.to(`chat:${msg.chatId}`).emit("chat:message", item);
          console.log(`[${msg.chatId}] AI: Link to about`);
          return;
        } else if (userText.includes("–∫–æ–Ω—Ç–∞–∫—Ç—ã") || userText.includes("contact") || userText.includes("email") || userText.includes("–ø–æ–¥–¥–µ—Ä–∂–∫–∞") || userText.includes("support") || userText.includes("help") || userText.includes("–ø–æ–º–æ—â—å") || userText.includes("feedback") || userText.includes("–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å") || userText.includes("–ø–∏—à–∏—Ç–µ") || userText.includes("write") || userText.includes("address") || userText.includes("–∞–¥—Ä–µ—Å") || userText.includes("phone") || userText.includes("—Ç–µ–ª–µ—Ñ–æ–Ω") || userText.includes("call") || userText.includes("–∑–≤–æ–Ω–æ–∫") || userText.includes("social") || userText.includes("—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏") || userText.includes("telegram") || userText.includes("twitter") || userText.includes("instagram") || userText.includes("vk") || userText.includes("youtube") || userText.includes("location") || userText.includes("–≥–¥–µ –º—ã") || userText.includes("office") || userText.includes("–æ—Ñ–∏—Å") || userText.includes("map") || userText.includes("–∫–∞—Ä—Ç–∞") || userText.includes("faq") || userText.includes("–≤–æ–ø—Ä–æ—Å—ã") || userText.includes("answers") || userText.includes("report") || userText.includes("–∂–∞–ª–æ–±–∞") || userText.includes("bug") || userText.includes("issue") || userText.includes("problem") || userText.includes("complaint") || userText.includes("suggestion") || userText.includes("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ") || userText.includes("idea") || userText.includes("–∏–¥–µ—è") || userText.includes("reach out") || userText.includes("get in touch") || userText.includes("connect") || userText.includes("communication") || userText.includes("channel") || userText.includes("–∫–∞–Ω–∞–ª")) {
          const linkMsg = {
            from: "ai",
            type: "link",
            text: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ö–æ–Ω—Ç–∞–∫—Ç—ã",
            url: "/contact",
            chatId: msg.chatId,
            at: new Date().toISOString(),
            ai: true,
          };
          const item = await ChatMessage.create(linkMsg);
          io.to(`chat:${msg.chatId}`).emit("chat:message", item);
          console.log(`[${msg.chatId}] AI: Link to contact`);
          return;
        } else if (userText.includes("–¥–æ–º–æ–π") || userText.includes("–≥–ª–∞–≤–Ω–∞—è") || userText.includes("home") || userText.includes("–Ω–∞—á–∞–ª–æ") || userText.includes("main") || userText.includes("start") || userText.includes("welcome") || userText.includes("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ") || userText.includes("landing") || userText.includes("overview") || userText.includes("–æ–±–∑–æ—Ä") || userText.includes("index") || userText.includes("root") || userText.includes("front page") || userText.includes("homepage") || userText.includes("–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã") || userText.includes("get started") || userText.includes("demo") || userText.includes("–ø–æ–∫–∞–∑–∞—Ç—å") || userText.includes("show me") || userText.includes("what is this") || userText.includes("—á—Ç–æ —ç—Ç–æ") || userText.includes("tour") || userText.includes("—ç–∫—Å–∫—É—Ä—Å–∏—è") || userText.includes("intro") || userText.includes("introduction") || userText.includes("dashboard") || userText.includes("–ø–∞–Ω–µ–ª—å") || userText.includes("main menu") || userText.includes("–º–µ–Ω—é") || userText.includes("navigate") || userText.includes("–Ω–∞–≤–∏–≥–∞—Ü–∏—è") || userText.includes("back to home") || userText.includes("–≤–µ—Ä–Ω—É—Ç—å—Å—è") || userText.includes("reset") || userText.includes("–æ—á–∏—Å—Ç–∏—Ç—å") || userText.includes("fresh start") || userText.includes("–Ω–æ–≤—ã–π") || userText.includes("first page") || userText.includes("–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞") || userText.includes("site map") || userText.includes("–∫–∞—Ä—Ç–∞ —Å–∞–π—Ç–∞") || userText.includes("browse") || userText.includes("–ø—Ä–æ—Å–º–æ—Ç—Ä") || userText.includes("explore") || userText.includes("–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å") || userText.includes("main site") || userText.includes("—Å–∞–π—Ç") || userText.includes("web") || userText.includes("–≤–µ–±")) {
          const linkMsg = {
            from: "ai",
            type: "link",
            text: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É",
            url: "/",
            chatId: msg.chatId,
            at: new Date().toISOString(),
            ai: true,
          };
          const item = await ChatMessage.create(linkMsg);
          io.to(`chat:${msg.chatId}`).emit("chat:message", item);
          console.log(`[${msg.chatId}] AI: Link to home`);
          return;
        }

        const aiMsg = await ChatMessage.create({
          from: "ai",
          text: aiResponse,
          chatId: msg.chatId,
          ai: true,
        });

        io.to(`chat:${msg.chatId}`).emit("chat:message", aiMsg);
        console.log(`[${msg.chatId}] AI: ${aiResponse.substring(0, 50)}...`);
      }

      // –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`[${msg.chatId}] ${item.from}: ${item.text}`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ chat:message", err);
    }
  });

  socket.on("disconnect", () => {
    console.log("üî¥ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω:", socket.id);
  });
});

// ---------- MIDDLEWARES ----------
app.use(express.json({ limit: "2mb" }));
app.use(cors({ origin: ["http://localhost:3000"] }));
app.use(session({
  secret: process.env.SESSION_SECRET || 'fallback_session_secret',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // 1 day
}));
app.use(passport.initialize());
app.use(passport.session());

// ---------- FILE STORAGE ----------
const DATA_DIR = path.join(__dirname, "data");
const JOBS_FILE = path.join(DATA_DIR, "jobs.json");
const SUPPORT_FILE = path.join(DATA_DIR, "support.json");

if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
if (!fs.existsSync(JOBS_FILE)) fs.writeFileSync(JOBS_FILE, "[]");
if (!fs.existsSync(SUPPORT_FILE)) fs.writeFileSync(SUPPORT_FILE, "[]");

const readJSON = (file) => JSON.parse(fs.readFileSync(file, "utf-8"));
const writeJSON = (file, data) =>
  fs.writeFileSync(file, JSON.stringify(data, null, 2));

// ---------- ROUTES ----------
// health
app.get("/", (_req, res) => res.send("üí´ Nebula API —Ä–∞–±–æ—Ç–∞–µ—Ç"));
app.get("/api/health", (_req, res) =>
  res.json({ ok: true, ts: Date.now() })
);

// —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
app.get("/api/chats", async (_req, res) => {
  const list = await Chat.find().sort({ createdAt: -1 }).limit(200);
  res.json(list);
});

// —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
app.get("/api/chats/:chatId/messages", async (req, res) => {
  const msgs = await ChatMessage.find({ chatId: req.params.chatId })
    .sort({ at: 1 })
    .limit(1000);
  res.json(msgs);
});

// –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç
app.post("/api/chats/:chatId/close", async (req, res) => {
  const chat = await Chat.findOne({ chatId: req.params.chatId });
  if (!chat) return res.status(404).json({ message: "Chat not found" });
  chat.status = "closed";
  const chatId = req.params.chatId;
  io.to(`chat:${chatId}`).emit("chat:closed", { chatId });
  io.to("operators").emit("chat:closed", { chatId });
  chat.closedAt = new Date();
  await chat.save();
  res.json({ message: "Closed" });
});

// –≤–∞–∫–∞–Ω—Å–∏–∏
app.get("/api/jobs", (_req, res) => res.json(readJSON(JOBS_FILE)));
app.post("/api/jobs", (req, res) => {
  const { name, email, phone, telegram, resume } = req.body || {};
  if (!name || !email || !phone || !telegram || !resume) {
    return res.status(400).json({ message: "–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è." });
  }
  const emailOk = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  if (!emailOk) return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email." });

  const jobs = readJSON(JOBS_FILE);
  const item = {
    id: Date.now(),
    name,
    email,
    phone,
    telegram,
    resume,
    createdAt: new Date().toISOString(),
  };
  jobs.push(item);
  writeJSON(JOBS_FILE, jobs);
  res.status(201).json({ message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", application: item });
});

// fallback —á–∞—Ç (—Ñ–∞–π–ª–æ–≤—ã–π)
app.get("/api/support", (_req, res) => {
  const msgs = readJSON(SUPPORT_FILE);
  res.json(msgs.slice(-200));
});
app.post("/api/support", (req, res) => {
  const { from = "user", text } = req.body || {};
  if (!text || typeof text !== "string") {
    return res.status(400).json({ message: "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å." });
  }
  const msgs = readJSON(SUPPORT_FILE);
  const item = { id: Date.now(), from, text, at: new Date().toISOString() };
  msgs.push(item);
  writeJSON(SUPPORT_FILE, msgs);
  res.status(201).json({ message: "–ü—Ä–∏–Ω—è—Ç–æ", item });
});

// Country detection endpoint
app.get("/api/detect-country", async (req, res) => {
  try {
    let ip = req.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    if (ip === '::1' || ip === '127.0.0.1') ip = '8.8.8.8'; // test IP
    const geoResponse = await axios.get(`https://ipapi.co/${ip}/json/`);
    const country = geoResponse.data.country_code;
    const config = getCountryConfig(country);
    res.json({ country, ...config });
  } catch (err) {
    console.error('Geolocation error:', err);
    res.status(500).json({ error: 'Unable to detect country' });
  }
});

// Payment config by country
app.get("/api/payment-config/:country", (req, res) => {
  const config = getCountryConfig(req.params.country);
  res.json(config);
});

// Update user language
app.post("/api/user/language", authenticateToken, async (req, res) => {
  try {
    const { language } = req.body;
    if (!language) return res.status(400).json({ message: 'Language required' });
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ message: 'User not found' });
    user.language = language;
    await user.save();
    res.json({ message: 'Language updated', user: { language: user.language } });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Translation endpoint for AdminChat
app.post('/api/translate', async (req, res) => {
  try {
    const { text, fromLang = 'auto', toLang = 'en' } = req.body;
    if (!text) return res.status(400).json({ error: 'Text required' });

    // Mock translation for demo (replace with real API like Google Translate)
    const mockTranslations = {
      'ru': {
        '–ø—Ä–∏–≤–µ—Ç': 'Hello',
        '—Å–ø–∞—Å–∏–±–æ': 'Thank you',
        '–ø–æ–º–æ—â—å': 'Help',
        '—Å–∫–∞—á–∞—Ç—å': 'Download',
        '–ø–æ–¥–ø–∏—Å–∫–∞': 'Subscription',
        '–≤–∞–∫–∞–Ω—Å–∏—è': 'Job',
        default: text // No translation if no key
      },
      'ja': {
        '„Åì„Çì„Å´„Å°„ÅØ': 'Hello',
        '„ÅÇ„Çä„Åå„Å®„ÅÜ': 'Thank you',
        default: text
      },
      // Add more languages as needed
    };

    let detectedLang = fromLang;
    let translatedText = text;

    if (fromLang === 'auto') {
      // Simple lang detection based on text (mock)
      if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('—Å–ø–∞—Å–∏–±–æ')) detectedLang = 'ru';
      else if (text.includes('„Åì„Çì„Å´„Å°„ÅØ')) detectedLang = 'ja';
      else detectedLang = 'en';
    }

    // Mock translation
    if (detectedLang !== 'en') {
      translatedText = mockTranslations[detectedLang]?.[text.toLowerCase()] || text;
    }

    res.json({ translatedText, detectedLang });
  } catch (error) {
    console.error('Translation error:', error);
    res.status(500).json({ error: 'Translation failed' });
  }
});

// Serve i18n JSON for dynamic loading if needed (optional, since static in frontend)
app.get("/api/i18n/:lang", (req, res) => {
  const lang = req.params.lang;
  const filePath = path.join(__dirname, '../client/src/locales', lang, 'common.json');
  try {
    if (fs.existsSync(filePath)) {
      res.json(JSON.parse(fs.readFileSync(filePath, 'utf8')));
    } else {
      res.status(404).json({ error: 'Language not found' });
    }
  } catch (err) {
    console.error('i18n serve error:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// For existing users without language field (Mongoose auto-adds, but to set default):
// User.updateMany({}, { $setOnInsert: { language: 'en' } }); // Run once if needed

// Auth routes
app.post("/api/auth/register", async (req, res) => {
  try {
    const { email, password, user_country, language, payment_method, currency } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    let config;
    if (!user_country) {
      // Auto detect
      let ip = req.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress;
      if (ip === '::1' || ip === '127.0.0.1') ip = '8.8.8.8';
      const geoResponse = await axios.get(`https://ipapi.co/${ip}/json/`);
      const country = geoResponse.data.country_code;
      config = getCountryConfig(country);
    } else {
      config = getCountryConfig(user_country);
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({
      email,
      password: hashedPassword,
      user_country: config.country,
      language: language || config.language,
      payment_method: payment_method || config.payment_method,
      currency: currency || config.currency
    });
    await user.save();

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
    res.status(201).json({
      token,
      user: {
        id: user._id,
        email,
        user_country: user.user_country,
        language: user.language,
        payment_method: user.payment_method,
        currency: user.currency
      }
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/auth/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
    res.json({ token, user: { id: user._id, email } });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// OAuth routes
app.get('/auth/google', passport.authenticate('google', { scope: ['email'] }));
app.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/login' }), (req, res) => {
  const token = jwt.sign({ id: req.user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
  res.redirect(`http://localhost:3000/auth/success?token=${token}&email=${req.user.email}`);
});

app.get('/auth/apple', passport.authenticate('apple', { scope: 'email' }));
app.get('/auth/apple/callback', passport.authenticate('apple', { failureRedirect: '/login' }), (req, res) => {
  const token = jwt.sign({ id: req.user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
  res.redirect(`http://localhost:3000/auth/success?token=${token}&email=${req.user.email}`);
});

app.get('/auth/vk', passport.authenticate('vkontakte', { scope: ['email'] }));
app.get('/auth/vk/callback', passport.authenticate('vkontakte', { failureRedirect: '/login' }), (req, res) => {
  const token = jwt.sign({ id: req.user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
  res.redirect(`http://localhost:3000/auth/success?token=${token}&email=${req.user.email}`);
});

app.get('/auth/yandex', passport.authenticate('yandex', { scope: ['login:email'] }));
app.get('/auth/yandex/callback', passport.authenticate('yandex', { failureRedirect: '/login' }), (req, res) => {
  const token = jwt.sign({ id: req.user._id }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: '1h' });
  res.redirect(`http://localhost:3000/auth/success?token=${token}&email=${req.user.email}`);
});

app.get('/auth/logout', (req, res) => {
  req.logout((err) => {
    if (err) return next(err);
  });
  req.session.destroy();
  res.redirect('http://localhost:3000');
});

// 404 –¥–ª—è API
app.post('/api/create-robokassa-payment', authenticateToken, async (req, res) => {
  try {
    const { subId } = req.body;
    if (!subId) {
      return res.status(400).json({ error: 'subId required' });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (user.subscription === subId) {
      return res.status(400).json({ error: 'Already subscribed to this plan' });
    }

    const prices = {
      basic: 990,
      pro: 2990,
      premium: 3990,
      elite: 5990,
      vip: 7990,
      ultimate: 16990
    };

    const outSum = prices[subId];
    const invId = Date.now().toString(); // Simple unique ID
    const merchantLogin = process.env.ROBOKASSA_MERCHANT_LOGIN || '';
    const password1 = process.env.ROBOKASSA_PASSWORD1 || '';

    const signatureString = `${merchantLogin}:${outSum}:${invId}:${password1}`;
    const signatureValue = crypto.createHash('md5').update(signatureString).digest('hex').toUpperCase();

    const formHtml = `
      <html>
        <body>
          <form method="POST" action="https://auth.robokassa.ru/Merchant/Index.aspx">
            <input type="hidden" name="MrchLogin" value="${merchantLogin}">
            <input type="hidden" name="OutSum" value="${outSum}">
            <input type="hidden" name="InvId" value="${invId}">
            <input type="hidden" name="Desc" value="–ü–æ–¥–ø–∏—Å–∫–∞ Nebula ${subId}">
            <input type="hidden" name="SignatureValue" value="${signatureValue}">
            <input type="hidden" name="Shp_userId" value="${user._id}">
            <input type="hidden" name="Shp_subId" value="${subId}">
            <input type="hidden" name="IsTest" value="1">
            <input type="submit" value="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ">
          </form>
          <script>document.forms[0].submit();</script>
        </body>
      </html>
    `;

    res.set('Content-Type', 'text/html');
    res.send(formHtml);
  } catch (error) {
    console.error('Robokassa error:', error);
    res.status(500).json({ error: 'Payment setup failed' });
  }
});

// Create Stripe payment (test mode)
app.post('/api/create-stripe-payment', authenticateToken, async (req, res) => {
  try {
    const { subId } = req.body;
    if (!subId) {
      return res.status(400).json({ error: 'subId required' });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (user.subscription === subId) {
      return res.status(400).json({ error: 'Already subscribed to this plan' });
    }

    // Test prices in cents (adjust for currency)
    const prices = {
      basic: 1000, // ~10 USD/EUR etc.
      standard: 3000,
      premium: 4000,
      pro: 6000,
      elite: 8000,
      ultimate: 17000
    };
    const amount = prices[subId] || 1000;

    // Use user currency if supported by Stripe (no RUB)
    const currency = user.currency === 'RUB' ? 'usd' : user.currency.toLowerCase();

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency,
          product_data: {
            name: `Nebula ${subId} Subscription (Test)`,
          },
          unit_amount: amount,
        },
        quantity: 1,
      }],
      mode: 'payment', // Test one-time payment; for real subscriptions, use 'subscription' and price_id
      success_url: 'http://localhost:3000/profile?success=true',
      cancel_url: 'http://localhost:3000/profile?cancel=true',
      metadata: {
        userId: user._id.toString(),
        subId,
      },
    });

    // Comment: For real payments, implement Stripe webhooks to update user.subscription and subscription_status to 'active'
    // Webhook endpoint: POST /api/stripe-webhook, verify signature, handle 'checkout.session.completed'

    res.json({
      url: session.url,
      sessionId: session.id
    });
  } catch (error) {
    console.error('Stripe error:', error);
    res.status(500).json({ error: 'Payment setup failed' });
  }
});

app.get('/payment/result', async (req, res) => {
  try {
    const { OutSum, InvId, SignatureValue, Shp_userId, Shp_subId, Status } = req.query;
    if (!OutSum || !InvId || !SignatureValue || !Shp_userId || !Shp_subId || Status !== 'Success') {
      return res.redirect('http://localhost:3000/profile?cancel=true');
    }

    const merchantLogin = process.env.ROBOKASSA_MERCHANT_LOGIN || '';
    const password2 = process.env.ROBOKASSA_PASSWORD2 || '';
    const signatureString = `${merchantLogin}:${OutSum}:${InvId}:${Status}:${password2}`;
    const expectedSignature = crypto.createHash('md5').update(signatureString).digest('hex').toUpperCase();

    if (SignatureValue !== expectedSignature) {
      console.error('Invalid signature');
      return res.redirect('http://localhost:3000/profile?cancel=true');
    }

    const user = await User.findById(Shp_userId);
    if (user) {
      user.subscription = Shp_subId;
      await user.save();
    }

    res.redirect('http://localhost:3000/profile?success=true');
  } catch (error) {
    console.error('Result handling error:', error);
    res.redirect('http://localhost:3000/profile?cancel=true');
  }
});

app.use((req, res, next) => {
  if (req.path.startsWith("/api/")) {
    return res.status(404).json({
      error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
      method: req.method,
      path: req.originalUrl,
    });
  }
  next();
});

// ---------- FRONTEND ----------
const clientBuildPath = path.join(__dirname, "../client/build");
app.use(express.static(clientBuildPath));
app.get("*", (_req, res) =>
  res.sendFile(path.join(clientBuildPath, "index.html"))
);

// ---------- START ----------
server.listen(PORT, () => {
  console.log(`üöÄ Nebula API —Å–ª—É—à–∞–µ—Ç http://localhost:${PORT}`);
  console.log(`üõ∞ WebSocket –Ω–∞ ws://localhost:${PORT}`);
});